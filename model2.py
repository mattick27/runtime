from keras.layers import Input, LSTM, Dense,Dropout,Flatten,concatenate,BatchNormalization,Activation
from keras.models import Model
import numpy as np
x_train = np.load('ex.npy')
x_train = np.concatenate((x_train,np.load('ex1.npy'),np.load('ex21.npy'),np.load('ex22.npy'),np.load('ex31.npy'),np.load('ex32.npy')))
yx_train = np.array([20,20,12,20,9,10,29,8,5,6,5,10,14,13,13,14,8,10,8,30,14,6,11,17,5,9,17,13,12,19,10,18,12,8,6,8,18,4,13,5,6,10,7,8,4,13,6,11,5,4,9,5,11,17,10,7,17,8,1,3,3,8,4,6,7,23,7,1,9,8,8,5,20,7,5,9,5,1,1,5,9,6,3,7,4,6,5,6,6,19,11,6,4,5,2,9,12,7,7,8,7,
                    4,3,8,4,1,9,12,4,6,7,3,5,6,6,2,2,2,13,28,5,8,4,9,4,5,10,17,4,3,5,11,3,8,12,16,3,11,9,7,5,7,12,12,5,9,10,1,13,9,7,5,15,1,7,5,8,7,17,13,6,16,10,15,3,11,2,3,6,6,7,6,5,3,6,2,15,10,5,10,19,20,2,10,2,8,3,5,6,6,7,3,18,3,5,6,2,5,4,5,
                    1,1,1,1,2,7,4,1,3,2,1,1,1,2,1,2,2,3,1,1,1,1,2,2,2,2,2,2,1,2,2,1,1,1,1,1,3,1,1,3,1,1,1,7,1,1,1,1,1,1,1,1,1,2,2,1,1,2,1,1,1,1,
                    1,1,2,1,2,1,1,10,1,1,1,1,1,1,1,1,1,4,1,1,1,1,2,1,1,2,2,1,3,2,2,1,1,3,1,1,1,1,1,2,1,1,1,2,1,1,3,1,1,2,1,1,1,1,1,1,1,1,1,1,
                    3,3,3,2,2,6,2,2,2,1,4,5,3,3,2,4,4,2,1,1,2,3,1,2,3,4,3,6,1,1,3,3,7,5,4,10,7,3,9,10,2,3,2,3,2,2,2,1,3,2,4,1,3,3,4,3,1,2,9,
                    8,3,2,4,2,2,5,2,3,7,7,5,6,1,2,6,3,2,19,7,18,8,4,6,2,18,10,12,4,8,2,7,6,4,4,2,6,5,7,3,4,3,6,5,2,2,2,2,3,3,2,4,4,3,2,2,
                    2,2,5,7,4,3,2,5,4,2,6,1,3,5,6,2,3,2,2,1,8,6,2,3,5,2,2,3,6,9,6,9,2,4,2,5,4,2,1,2,4,9,3,5,6,2,7,6,2,1,3,3,2,6,5,3,1,1,3,2,
                    1,4,2,10,4,0,2,3,5,4,6,3,7,9]) #person
yy_train = np.array([9,8,12,4,9,10,29,8,5,6,0,10,14,13,9,5,3,6,6,15,13,6,5,16,3,0,17,9,4,6,5,12,1,1,0,2,1,1,4,2,0,2,0,0,0,0,1,0,0,1,3,0,3,0,2,0,7,0,1,1,1,0,0,1,2,12,2,1,2,1,1,5,3,4,1,3,2,0,1,2,4,4,2,0,1,6,0,2,3,4,1,4,1,1,2,4,2,4,3,1,1,
                    0,2,1,3,1,0,3,0,1,3,0,3,1,5,0,0,1,0,4,0,3,1,0,0,1,5,0,0,1,2,5,1,0,0,4,0,0,1,0,1,0,1,1,1,6,0,1,0,2,4,0,3,0,4,1,2,3,2,5,2,7,3,0,0,1,1,3,4,1,1,1,1,0,6,0,0,6,5,5,10,5,0,0,0,3,0,0,2,0,4,2,0,1,3,0,0,1,1,1,
                    0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,3,0,0,0,1,0,1,1,1,1,1,0,1,1,0,0,0,0,1,0,0,1,1,1,1,1,
                    1,1,1,1,2,1,1,3,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,0,0,1,1,0,1,1,1,0,0,1,0,0,1,0,0,1,1,1,0,1,1,0,
                    1,0,1,1,0,1,1,0,0,1,1,0,1,0,1,3,0,0,1,1,0,3,1,2,3,0,0,0,0,0,0,0,1,2,0,1,4,3,1,3,2,1,1,3,2,2,2,0,0,0,1,0,0,1,1,0,1,1,2,
                    0,1,1,1,2,2,1,0,2,2,2,1,3,0,0,0,1,0,2,2,0,2,0,0,0,4,2,2,0,2,0,1,2,4,0,1,1,2,1,1,2,0,3,0,1,0,2,0,1,1,0,1,0,1,0,0,
                    0,1,4,0,1,3,2,5,3,2,3,1,2,0,0,0,0,0,0,0,0,1,0,0,4,1,0,1,3,2,1,2,0,1,2,0,0,0,1,0,0,1,1,0,0,0,0,1,2,0,0,0,0,3,0,0,1,1,0,0,
                    1,0,0,0,0,0,0,0,0,0,0,0,2,0]) #face
yz_train = np.array([0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,1,19,0,0,1,13,6,3,7,2,9,2,5,3,2,2,13,10,4,13,4,2,0,21,2,7,7,14,9,5,3,8,4,8,2,2,0,5,9,11,2,4,8,4,3,5,5,5,4,4,6,6,5,4,2,1,2,7,2,1,1,1,3,5,3,3,5,
                    1,4,1,1,1,5,5,1,4,3,0,4,2,2,4,3,2,4,6,2,3,3,5,3,6,3,2,4,3,3,3,4,6,4,3,5,3,4,6,8,5,4,4,4,4,2,6,5,5,0,3,6,6,2,4,2,4,2,0,2,6,0,7,8,4,6,3,2,6,0,3,4,2,0,1,3,3,2,2,0,0,6,4,0,5,3,3,5,1,3,1,1,4,6,4,4,3,3,6,
                    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,0,0,0,0,0,0,0,0,0,0,0]) #car

yx_train = np.concatenate((yx_train,np.load('people.npy'),np.load('people1.npy')))
yy_train = np.concatenate((yy_train,np.load('face.npy'),np.load('face1.npy')))
yz_train = np.concatenate((yz_train,np.load('car.npy'),np.load('car1.npy')))
yx_train = np.transpose(yx_train)
yy_train = np.transpose(yy_train)
yz_train = np.transpose(yz_train)
print(yx_train.shape)
print(yy_train.shape)
print(yz_train.shape)

place = Input(shape=(300,84))

x = Dense(2,name='dx0')(place)
x = BatchNormalization()(x)
x = Activation('linear')(x)
x = Dropout(0.5)(x)

x = Dense(4,name='dx1')(x)
x = BatchNormalization()(x)
x = Activation('linear')(x)

# x = Dense(256,activation='relu',name='dx3')(x)
# x = Dense(256,activation='relu',name='dx4')(x)
# x = Dropout(0.25)(x)
x = Flatten()(x)
x = Dense(2,name='dx2')(x)
x = BatchNormalization()(x)
x = Activation('linear')(x)
x_out = Dense(1,name='dx_out')(x)

y = Dense(2,name='dy1')(place)
y = BatchNormalization()(y)
y = Activation('linear')(y)
y = Dropout(0.5)(y)
y = Dense(4,name='dy2')(y)
y = BatchNormalization()(y)
y = Activation('linear')(y)
y = Dropout(0.5)(y)

# y = Dense(256,activation='relu',name='dy3')(y)
# y = Dense(256,activation='relu',name='dy4')(y)
# y = Dropout(0.25)(y)
y = Flatten()(y)
y = Dense(2,name='dy5')(y)
y = BatchNormalization()(y)
y = Activation('linear')(y)
y = Dropout(0.5)(y)

y_out = Dense(1,name='dy_out')(y)

z = Dense(2,name='dz1')(place)
z = BatchNormalization()(z)
z = Activation('linear')(z)
z = Dropout(0.5)(z)

z = Dense(4,name='dz2')(z)
z = BatchNormalization()(z)
z = Activation('linear')(z)
z = Dropout(0.5)(z)
# z = Dense(64,activation='relu',name='dz5')(z)
# z = Dense(64,activation='relu',name='dz6')(z)
# z = Dropout(0.25)(z)
# z = Dense(64,activation='relu',name='dz7')(z)
z = Flatten()(z)
z = Dropout(0.5)(z)
z_out = Dense(1,activation='linear',name='dz_out')(z)

model2 = Model(inputs=[place],outputs=[x_out,y_out,z_out])
model2.compile(optimizer='adam',
              loss='mse')

model2.fit(x_train[30:1843],[yx_train[30:1843],yy_train[30:1843],yz_train[30:1843]]
            ,epochs=1000,verbose=1,
            validation_data=(x_train[0:30],[yx_train[0:30],yy_train[0:30],yz_train[0:30]])
            )
score = model2.predict(x_train[0:40])
score = np.transpose(score)
for i in range(len(score)):
    print(score[i])
    print(yx_train[0:40])
    print(yy_train[0:40])
    print(yz_train[0:40])
    print('-----------------------------------------------')
